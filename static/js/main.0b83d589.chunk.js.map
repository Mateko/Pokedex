{"version":3,"sources":["components/PickingPokemon.js","components/PokemonSkills.js","components/Loader.js","components/PokemonAbilities.js","components/LinkToMainPage.js","components/helpers/PokemonTypeColors.js","components/helpers/PokemonType.js","components/PokemonDetails.js","components/RandomPokemons.js","components/App.js","index.js"],"names":["PickingPokemon","state","pokemon","toPokeDetails","randomPokemons","e","preventDefault","this","setState","target","value","props","onGettingPokemonName","onRandomPokemons","disableButton","length","whiteSpaces","split","to","className","src","alt","type","placeholder","onChange","onInputChange","bind","onClick","onInputSubmit","disabled","onButtonClick","React","Component","PokemonSkills","stats","map","stat","key","url","name","toUpperCase","base_stat","effort","Loader","abilities","ability","LinkToMainPage","message","role","pokemonTypeColors","grass","fire","water","bug","normal","poison","electric","ground","fairy","fighting","psychic","rock","ghost","ice","dragon","pokemonType","selectedPokemon","types","console","log","style","color","PokemonDetails","fetchingError","colorOfPokemonName","sprites","front_default","PokemonAbilities","RandomPokemons","pokemonName","getAttribute","showingRandomPokemons","pokemonsArray","location_area_encounters","P","require","Pokedex","App","a","loweredSelectedPokemon","toLowerCase","getPokemonByName","randomPokemonsArray","Array","fill","Math","floor","random","resource","then","response","basename","process","path","exact","component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.0b83d589.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"./PickingPokemon.css\";\r\n\r\nclass PickingPokemon extends React.Component {\r\n  state = { pokemon: \"\", toPokeDetails: false, randomPokemons: false };\r\n\r\n  onInputChange(e) {\r\n    e.preventDefault();\r\n    this.setState({\r\n      pokemon: e.target.value\r\n    });\r\n  }\r\n\r\n  onInputSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onGettingPokemonName(this.state.pokemon);\r\n    this.setState({\r\n      toPokeDetails: true\r\n    });\r\n  }\r\n\r\n  onButtonClick(e) {\r\n    e.preventDefault();\r\n    this.props.onRandomPokemons();\r\n    this.setState({\r\n      randomPokemons: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const disableButton = this.state.pokemon.length === 0;\r\n    const whiteSpaces = this.state.pokemon.split(\" \").length > 1;\r\n\r\n    if (this.state.toPokeDetails === true) {\r\n      return <Redirect to=\"/pokemon_details\" />;\r\n    }\r\n\r\n    if (this.state.randomPokemons === true) {\r\n      return <Redirect to=\"/random_pokemons\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"column pokemon-column-container\">\r\n        <div className=\"ui image aligned center aligned grid\">\r\n          <img\r\n            src=\"http://pluspng.com/img-png/pokemon-logo-png-pokemon-logo-png-2000.png\"\r\n            alt=\"Pokemon Logo PNG\"\r\n            className=\"pokemon-logo\"\r\n          />\r\n        </div>\r\n        <form className=\"ui large form\">\r\n          <h2>Catch by name</h2>\r\n          <div className=\"field\">\r\n            <div className=\"ui input\">\r\n              <input\r\n                className=\"pokemon-name-input\"\r\n                type=\"text\"\r\n                placeholder=\"Pokename!\"\r\n                onChange={this.onInputChange.bind(this)}\r\n                value={this.state.pokemon}\r\n              />\r\n            </div>\r\n            <button\r\n              className=\"ui fluid large submit pokemon-button-submit button\"\r\n              onClick={this.onInputSubmit.bind(this)}\r\n              disabled={disableButton | whiteSpaces}\r\n            >\r\n              Search\r\n            </button>\r\n\r\n            {whiteSpaces ? (\r\n              <div className=\"ui red message\">\r\n                Pokemon name can't have white spaces!\r\n              </div>\r\n            ) : null}\r\n\r\n            <button\r\n              className=\"ui fluid large submit pokemon-button-random-picks button\"\r\n              onClick={this.onButtonClick.bind(this)}\r\n            >\r\n              Discover random Pokemons!\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PickingPokemon;\r\n","import React from \"react\";\r\nconst PokemonSkills = ({ stats }) => {\r\n  return stats.map(stat => {\r\n    return (\r\n      <div\r\n        className=\"eight wide column pokemon-skills-container\"\r\n        key={stat.stat.url}\r\n      >\r\n        <h4 className=\"pokemon-skills-header\">\r\n          {stat.stat.name.toUpperCase()}\r\n        </h4>\r\n        <strong>Base stat:</strong>\r\n        <p>{stat.base_stat}</p>\r\n        <strong>Effort:</strong>\r\n        <p>{stat.effort}</p>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nexport default PokemonSkills;\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"ui grid aligned center\" className=\"pokemon-detail-loader\">\r\n      <div className=\"ui active inverted dimmer\">\r\n        <div className=\"ui large text loader\">Loading</div>\r\n      </div>\r\n      <p></p>\r\n      <p></p>\r\n      <p></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\nconst PokemonSkills = ({ abilities }) => {\r\n  return abilities.map(({ ability }) => {\r\n    return (\r\n      <div\r\n        className=\"sixteen wide column pokemon-abilities-div\"\r\n        key={ability.url}\r\n      >\r\n        <h4>{ability.name}</h4>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nexport default PokemonSkills;\r\n","import { Link } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst LinkToMainPage = ({ message }) => {\r\n  return (\r\n    <Link\r\n      className=\"ui fluid large submit link-to-main-page button\"\r\n      role=\"button\"\r\n      to=\"/\"\r\n    >\r\n      {message}\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default LinkToMainPage;\r\n","const pokemonTypeColors = {\r\n  grass: \"#78C850\",\r\n  fire: \"#F08030\",\r\n  water: \"#6890F0\",\r\n  bug: \"#A8B820\",\r\n  normal: \"#A8A878\",\r\n  poison: \" #47D147\",\r\n  electric: \"#FFFF66\",\r\n  ground: \" #CCCCB3\",\r\n  fairy: \"#EE99AC\",\r\n  fighting: \"#C03028\",\r\n  psychic: \"#F85888\",\r\n  rock: \"#B8A038\",\r\n  ghost: \"#705898\",\r\n  ice: \"#4D79FF\",\r\n  dragon: \"#7038F8\"\r\n};\r\n\r\nexport default pokemonTypeColors;\r\n","import pokemonTypeColors from \"./PokemonTypeColors\";\r\nimport React from \"react\";\r\n\r\nexport default function pokemonType(selectedPokemon) {\r\n  return selectedPokemon.types.map(({ type }) => {\r\n    console.log(type);\r\n    return (\r\n      <p\r\n        key={type.url}\r\n        className=\"pokemon-type\"\r\n        style={{ color: `${pokemonTypeColors[type.name]}` }}\r\n      >\r\n        {type.name}\r\n      </p>\r\n    );\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport PokemonSkills from \"./PokemonSkills\";\r\nimport Loader from \"./Loader\";\r\nimport PokemonAbilities from \"./PokemonAbilities\";\r\nimport LinkToMainPage from \"./LinkToMainPage\";\r\nimport pokemonTypeColors from \"./helpers/PokemonTypeColors\";\r\nimport pokemonType from \"./helpers/PokemonType\";\r\nimport \"./PokemonDetails.css\";\r\n\r\nconst PokemonDetails = ({ selectedPokemon, fetchingError }) => {\r\n  if (selectedPokemon !== null) {\r\n    const stats = selectedPokemon.stats;\r\n    const abilities = selectedPokemon.abilities;\r\n\r\n    const colorOfPokemonName = `${\r\n      pokemonTypeColors[selectedPokemon.types[0].type.name]\r\n    }`;\r\n\r\n    return (\r\n      <div className=\"ui grid aligned center pokemon-details-grid-div\">\r\n        <div className=\"seven wide column\">\r\n          <img\r\n            src={selectedPokemon.sprites.front_default}\r\n            alt=\"pokemon image\"\r\n            className=\"pokemon-image\"\r\n          />\r\n        </div>\r\n        <div className=\"nine wide column\">\r\n          <h1\r\n            style={{\r\n              color: colorOfPokemonName\r\n            }}\r\n            className=\"pokemon-name\"\r\n          >\r\n            {selectedPokemon.name}\r\n          </h1>\r\n          <h4 className=\"pokemon-type-header\">Type:</h4>\r\n          {pokemonType(selectedPokemon)}\r\n        </div>\r\n        <h4 className=\"ui horizontal divider header\">\r\n          <i className=\"bolt icon\"></i>\r\n          Abilities\r\n        </h4>\r\n        <PokemonAbilities abilities={abilities} />\r\n        <h4 className=\"ui horizontal divider header\">\r\n          <i className=\"bar chart icon\"></i>\r\n          Stats\r\n        </h4>\r\n        <PokemonSkills stats={stats} />\r\n        <div className=\"sixteen wide column\">\r\n          <LinkToMainPage message={\"Back to main page\"} />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (fetchingError) {\r\n    return (\r\n      <div className=\"fetching-error\">\r\n        <div className=\"ui error-message message\">Something went wrong :(</div>\r\n        <LinkToMainPage message={\"Go back to searching\"} />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Loader />;\r\n  }\r\n};\r\n\r\nexport default PokemonDetails;\r\n","import React from \"react\";\r\nimport LinkToMainPage from \"./LinkToMainPage\";\r\nimport Loader from \"./Loader\";\r\nimport \"./RandomPokemons.css\";\r\nimport pokemonTypeColors from \"./helpers/PokemonTypeColors\";\r\nimport pokemonType from \"./helpers/PokemonType\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass RandomPokemons extends React.Component {\r\n  state = { toPokeDetails: false };\r\n\r\n  onInputSubmit = e => {\r\n    e.preventDefault();\r\n    const pokemonName = e.target.getAttribute(\"name\");\r\n    this.props.onGettingPokemonName(pokemonName);\r\n    this.setState({\r\n      toPokeDetails: true\r\n    });\r\n  };\r\n\r\n  showingRandomPokemons = () => {\r\n    return this.props.pokemonsArray.map(pokemon => {\r\n      const colorOfPokemonName = `${\r\n        pokemonTypeColors[pokemon.types[0].type.name]\r\n      }`;\r\n\r\n      return (\r\n        <div\r\n          className=\"eight wide column\"\r\n          key={pokemon.location_area_encounters}\r\n        >\r\n          <div className=\"ui card\">\r\n            <div className=\"image\">\r\n              <img src={pokemon.sprites.front_default} />\r\n            </div>\r\n            <div className=\"content\">\r\n              <p\r\n                className=\"header random-pokemon-name\"\r\n                style={{ color: colorOfPokemonName }}\r\n              >\r\n                {pokemon.name}\r\n              </p>\r\n              <div className=\"description\">{pokemonType(pokemon)}</div>\r\n            </div>\r\n            <div className=\"extra content\">\r\n              <button\r\n                className=\"ui fluid large submit pokemon-button-submit button\"\r\n                onClick={this.onInputSubmit}\r\n                name={pokemon.name}\r\n              >\r\n                Details\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  render() {\r\n    if (this.state.toPokeDetails === true) {\r\n      return <Redirect to=\"/pokemon_details\" />;\r\n    }\r\n\r\n    if (this.props.pokemonsArray !== null) {\r\n      return (\r\n        <div className=\"ui grid random-pokemons-grid-component\">\r\n          <h1 className=\"sixteen wide column random-pokemon-header\">\r\n            Catch them all!\r\n          </h1>\r\n          {this.showingRandomPokemons()}\r\n          <div className=\"sixteen wide column\">\r\n            <LinkToMainPage message={\"Back to main page\"} />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <Loader />;\r\n    }\r\n  }\r\n}\r\n\r\nexport default RandomPokemons;\r\n","import React from \"react\";\r\nimport PickingPokemon from \"./PickingPokemon\";\r\nimport PokemonDetails from \"./PokemonDetails\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport RandomPokemons from \"./RandomPokemons\";\r\nconst Pokedex = require(\"pokeapi-js-wrapper\");\r\nconst P = new Pokedex.Pokedex();\r\n\r\nclass App extends React.Component {\r\n  state = { selectedPokemon: null, fetchingError: false, pokemonsArray: null };\r\n\r\n  onGettingPokemonName = async selectedPokemon => {\r\n    const loweredSelectedPokemon = selectedPokemon.toLowerCase();\r\n\r\n    try {\r\n      const pokemon = await P.getPokemonByName(loweredSelectedPokemon);\r\n      this.setState({\r\n        selectedPokemon: pokemon\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        fetchingError: true\r\n      });\r\n    }\r\n  };\r\n\r\n  onRandomPokemons = () => {\r\n    const initialUrlArray = new Array(20).fill(\"/api/v2/pokemon/\");\r\n    const randomPokemonsArray = initialUrlArray.map(\r\n      url => url + (Math.floor(Math.random() * 807) + 1)\r\n    );\r\n\r\n    P.resource(randomPokemonsArray).then(response => {\r\n      this.setState({\r\n        pokemonsArray: response\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n          <div className=\"ui middle aligned center aligned grid\">\r\n            <Route\r\n              path=\"/\"\r\n              exact\r\n              component={() => (\r\n                <PickingPokemon\r\n                  onGettingPokemonName={this.onGettingPokemonName}\r\n                  onRandomPokemons={this.onRandomPokemons}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/pokemon_details\"\r\n              exact\r\n              component={() => (\r\n                <PokemonDetails\r\n                  selectedPokemon={this.state.selectedPokemon}\r\n                  fetchingError={this.state.fetchingError}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/random_pokemons\"\r\n              exact\r\n              component={() => (\r\n                <RandomPokemons\r\n                  pokemonsArray={this.state.pokemonsArray}\r\n                  onGettingPokemonName={this.onGettingPokemonName}\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}